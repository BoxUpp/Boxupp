var ngBoxuppApp = angular.module('boxuppApp');

ngBoxuppApp.factory('User',function($http){
	return {
		login : function(userName, password){

			return $http({
		 				method: 'POST',
				 		url: '/boxupp/resources/user/login',
				 		data: angular.toJson({loginID : userName, password : password})
		 			}).then(function(result){
		 				return result.data;
		 			});
		},
		getProjects : function(userID){
			return $http({
		 				method: 'GET',
				 		url: '/boxupp/resources/user/getProjects/' + userID + '/',
		 			}).then(function(result){
		 				return result.data;
		 			});	
		},
		signup : function(newUserDetail){
			return $http({
		 				method: 'POST',
				 		url: '/boxupp/resources/user/signup/',
				 		data : angular.toJson(newUserDetail)
		 			}).then(function(result){
		 				return result.data;
		 			});	
		}
	}
});

ngBoxuppApp.factory('GitRepo', function($resource){
		return $resource('/boxupp/resources/gitRepo/:id')
});

ngBoxuppApp.factory('ResourcesData',function($http,$q){

	return {
		fetchBoxList : function(projectID){
			return $http({
		 				method: 'GET',
				 		url: '/boxupp/resources/project/getBoxes/' + projectID + '/',
		 			}).then(function(result){
		 				return result.data;
		 			});		
		},
		fetchScriptList : function(projectID){
			return $http({
		 				method: 'GET',
				 		url: '/boxupp/resources/project/getScripts/' + projectID + '/',
		 			}).then(function(result){
		 				return result.data;
		 			});			
		},
		fetchModuleList : function(projectID){
			return $http({
		 				method: 'GET',
				 		url: '/boxupp/resources/project/getAllModules/',
		 			}).then(function(result){
		 				return result.data;
		 			});				
		}
	}
	
});
ngBoxuppApp.factory('MachineConfig',function($resource){
		return $resource('/boxupp/resources/machineConfig/:id',{id:'@id'},{
			update:{
				method: 'PUT'
			}
		});
});

/*ngBoxuppApp.factory('MachineConfig',function($http,$q,$resource){
	var machineConfig = {};
	machineConfig.rs= function(){
		return $resource('/boxupp/resources/machineConfig/:id');
	};
	machineConfig.fetchList = function(projectID){
			return $http({
		 				method: 'GET',
				 		url: '/boxupp/resources/project/getBoxes/' + projectID + '/',
		 			}).then(function(result){
		 				return result.data;
		 			});		
		};
	return machineConfig;
});
*/ngBoxuppApp.factory('Projects',function($resource){
		return $resource('/boxupp/resources/project/:id');
});

ngBoxuppApp.factory('Providers',function($resource){
		return $resource('/boxupp/resources/provider/:id');
});


ngBoxuppApp.factory('retrieveMappings',function($http,$q,$timeout,$cacheFactory,$routeParams){
		return{
			/*fetchMappings : function(serverLocation,$scope){
				var completeURL = serverLocation + "/services/retrieveData";
				var $httpDefaultCache = $cacheFactory.get('$http');
				$httpDefaultCache.removeAll();
				var deferred = $q.defer();
				$http({	
					method:'GET',
					url:completeURL
				}).
				success(function(response, status, headers, config) {
					//if(response.fileExists){
						deferred.resolve(response);
					//}
				}).
				error(function(data, status, headers, config) {
					console.log(" : Error retrieving mappings from server : " + status);
					lockBoxupp = false;
				});
				return deferred.promise;
			}*/
			fetchScriptMappings : function(){
				var completeURL = "/boxupp/resources/project/getScriptMappping/" + $routeParams.projectID;
				
				var deferred = $q.defer();
				$http({	
					method:'GET',
					url:completeURL
				}).
				success(function(response, status, headers, config){
					deferred.resolve(response);
				}).
				error(function(data, status, headers, config) {
					console.log(" : Error retrieving script mappings from server : " + status);
				});
				return deferred.promise;
			},
			fetchPuppetMappings : function(){
				var completeURL = "/boxupp/resources/project/getModuleMapping/" + $routeParams.projectID;
				
				var deferred = $q.defer();
				$http({	
					method:'GET',
					url:completeURL
				}).
				success(function(response, status, headers, config){
					deferred.resolve(response);
				}).
				error(function(data, status, headers, config) {
					console.log(" : Error retrieving puppet mappings from server : " + status);
				});
				return deferred.promise;	
			}
		}
});

ngBoxuppApp.factory('vagrantStatus',function($http,$q,$timeout){
		return{
			updateVagrantStatus : function(serverLocation,$scope, userID){
				var parameters = {"userID":userID}
				var completeURL = "boxupp/checkVagrantStatus";
				var deferred = $q.defer();
				$http({	
					method:'GET',
					headers:{'Content-Type':'application/json; charset=UTF-8'},
					url:completeURL,
					params:parameters
				}).
				success(function(response, status, headers, config) {
						$scope.boxuppConfig.vagrantExecutionFlag = response.statusCode;
						deferred.resolve(response);
				}).
				error(function(data, status, headers, config) {
						console.log(" : Error checking vagrant status : ");
				});
				return deferred.promise;
			}
			}
	
});

ngBoxuppApp.factory('executeCommand',function($http,$q,$timeout){
		return{
			
			triggerVagrant : function(serverLocation,$scope){
				if (!window.WebSocket){
					console.log("WebSocket not supported by this browser");
					var completeURL = $scope.serverAddress + "/services/boxupp?command=" + $scope.deployCommand;
					$http({		
						method:'GET',
						headers:{'Content-Type':'application/json; charset=UTF-8'},
						url:completeURL
					}).
					success(function(data, status, headers, config) {
						$scope.resetFlags();
						$scope.fetchVagrantOutput();
						console.log("**********"+status);
					}).
					error(function(data, status, headers, config) {
						console.log("Error executing Vagrant command : " + data);
					});
				}else{
					console.log("Websocket supported");
					$scope.server.connect();
					$scope.waitForWSConnection(function(){
						$scope.server.send($scope.deployCommand);
					});
					
				}
				
			},
			saveBoxuppData : function($scope, projectID, userID){
				var boxuppMappings = {"projectID":projectID, "userID":userID};
				var completeURL = 'boxupp/resources/project/saveAsFile';
				var deferred = $q.defer();
				$http({	
						method:'POST',
						headers:{'Content-Type':'application/json; charset=UTF-8'},
						url:completeURL,
						data:angular.toJson(boxuppMappings)
					}).
				success(function(data, status, headers, config) {
					if(data.fileCreated){
						console.log("Vagrant File Saved at : " + data.fileCreationPath);
						$scope.resetFlags();
						$scope.flushVagrantOutputConsole();
						deferred.resolve(data);
					}
				}).
				error(function(data, status, headers, config) {
					console.log("Error saving Boxupp Data: " + data);
				});
				return deferred.promise;
			}
		}
});

ngBoxuppApp.factory('fileUpload',function($http,$q,$timeout){
		return{
			changeDestination : function($scope,destination){
				var completeURL;
				if(destination !== null){
					completeURL = $scope.$parent.serverAddress + "/services/uploadHandler/destination?loc="+destination;
				}else{
					completeURL = $scope.$parent.serverAddress + "/services/uploadHandler/destination";
				}
				
				var deferred = $q.defer();
				$http({	
					method:'POST',
					headers:{'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'},
					url:completeURL,
				}).
				success(function(response, status, headers, config) {
					deferred.resolve(response);
				}).
				error(function(data, status, headers, config) {
						console.log(" : Error updating file location : ");
				});
				return deferred.promise;
			}
		}
});

ngBoxuppApp.factory('puppetModule',function($http,$q,$timeout,$routeParams,miscUtil){
	return{
		searchPuppetModule : function($scope, searchModule){
			var parameters = {"query":searchModule,"owner":"","tag":"","show_deleted":"","sort_by":"","operatingsystem":"redhat","supported":"","pe_requirement":"","puppet_requirement":"","limit":"20","offset":"","If-Modified-Since":"Mon, 16 Dec 2013 22:09:00 GMT"};
			var completeURL = "/boxupp/resources/puppetModule/searchPuppetModule";
			var deferred = $q.defer();
			$http({	
				method:'GET',
				headers:{'Content-Type':'application/json; charset=UTF-8'},
				url:completeURL,
				params:parameters
			}).	success(function(response, status, headers, config) {
				deferred.resolve(response);
			}).	error(function(response, status, headers, config) {
				console.log("Error saving Boxupp Data: " + response);
			});
			return deferred.promise;
		},
		
		downloadPuppetModule : function(toBeDownloadedModule){
			// var filedata = {"fileURL" : fileUrl};
			var completeURL = "/boxupp/resources/puppetModule/downloadPuppetModule";
			var selectedModule = angular.copy(toBeDownloadedModule);
			selectedModule.creatorUserID = $routeParams.userID;
			selectedModule.creationTime = miscUtil.fetchCurrentTime();
			selectedModule.isDisabled = false;
			var deferred = $q.defer();
			$http({	
				method:'POST',
				headers:{'Content-Type':'application/json; charset=UTF-8'},
				url:completeURL,
				data : selectedModule
			}).success(function(response, status, headers, config) {
				console.log(response);
				deferred.resolve(response);
			}).error(function(response, status, headers, config) {
				console.log("Error downloading  Data: " + response);
			});
			return deferred.promise;
		}

	}	
});


ngBoxuppApp.factory('shellScript',function($resource){
	 return $resource('/boxupp/resources/shellScript/:id',{id:'@id'},{
			update:{
				method: 'PUT'
			}
		});
});

ngBoxuppApp.factory('miscUtil',function($filter, $routeParams,$http,$q){
	return{
		fetchCurrentTime : function(){
			return $filter('date')(new Date().getTime(), "yyyy'-'MM'-'dd HH':'mm':'ss");
		},

		selectActiveProject : function(){
			var completeURL = "/boxupp/selectProject";
			var parameters = {'userID':$routeParams.userID,'projectID': $routeParams.projectID};
			var deferred = $q.defer();
			$http({	
				method:'GET',
				headers:{'Content-Type':'application/json; charset=UTF-8'},
				url:completeURL,
				params:parameters
			}).	success(function(response, status, headers, config) {
				console.log("Active project has been set");
				deferred.resolve();
			}).	error(function(response, status, headers, config) {
				console.log("Error saving Boxupp Data: " + response);
			});
			return deferred.promise;
			console.log('demo');
		}
	}
});

ngBoxuppApp.factory('provision',function($http,$q,$routeParams){

	return{
		commitShellMappings : function(shellProvMappings){
			var shellScriptMappings = {};
			shellScriptMappings.projectID = $routeParams.projectID;
			shellScriptMappings.scriptMappings = angular.copy(shellProvMappings);
			var shellProvURL = "/boxupp/resources/shellScript/updateScriptMappings";
			var deferred = $q.defer();
			$http({	
				method : 'POST',
				headers : {'Content-Type':'application/json; charset=UTF-8'},
				url : shellProvURL,
				data : angular.toJson(shellScriptMappings)
			}).	success(function(response, status, headers, config) {
				console.log("Shell Prov Mappings have been committed");
				shellProvMappings = {};
				deferred.resolve();
			}).	error(function(response, status, headers, config) {
				console.log("Error committing shell prov mappings: " + response);
			});
			return deferred.promise;
		},
		commitModuleMappings : function(moduleProvMappings){
			var moduleMappings = {};
			moduleMappings.projectID = $routeParams.projectID;
			moduleMappings.moduleMappings = angular.copy(moduleProvMappings);
			var moduleProvURL = "/boxupp/resources/puppetModule/updateModuleMappings";

			var deferred = $q.defer();
			$http({	
				method : 'POST',
				headers : {'Content-Type':'application/json; charset=UTF-8'},
				url : moduleProvURL,
				data : angular.toJson(moduleMappings)
			}).	success(function(response, status, headers, config) {
				console.log("Module Mappings have been committed");
				moduleProvMappings = {};
				deferred.resolve();
			}).	error(function(response, status, headers, config) {
				console.log("Error committing module prov mappings: " + response);
			});
			return deferred.promise;
		}
	}
});
